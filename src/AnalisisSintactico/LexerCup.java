/* The following code was generated by JFlex 1.6.1 */

package AnalisisSintactico;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/cesar/OneDrive/Documentos/GitHub/GCKCompiler/src/AnalisisSintactico/LexerCup.flex</tt>
 */
public class LexerCup implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\5\1\15\1\12\1\4\22\0\1\12\1\56\1\6"+
    "\1\14\1\0\1\54\1\52\1\7\1\65\1\66\1\55\1\16\1\67"+
    "\1\11\1\17\1\13\2\1\1\37\7\1\1\0\1\0\1\60\1\53"+
    "\1\57\2\0\1\26\1\34\1\27\1\40\1\36\1\23\1\33\1\31"+
    "\1\20\1\47\1\50\1\24\1\45\1\21\1\25\1\46\1\2\1\32"+
    "\1\30\1\22\1\43\1\42\1\44\1\41\1\35\1\2\1\63\1\10"+
    "\1\64\1\0\1\3\1\0\1\26\1\34\1\27\1\40\1\36\1\23"+
    "\1\33\1\31\1\20\1\47\1\50\1\24\1\45\1\21\1\25\1\46"+
    "\1\2\1\32\1\30\1\22\1\43\1\42\1\44\1\41\1\35\1\2"+
    "\1\61\1\51\1\62\7\0\1\15\34\0\4\0\4\0\1\0\12\0"+
    "\1\0\4\0\1\0\5\0\1\0\1\2\7\0\1\2\3\0\1\2"+
    "\3\0\1\2\1\0\1\2\3\0\1\0\2\0\1\2\1\0\1\2"+
    "\4\0\1\2\7\0\1\2\3\0\1\2\3\0\1\2\1\0\1\2"+
    "\3\0\1\0\2\0\1\2\1\0\1\2\u01c5\0\4\0\14\0\16\0"+
    "\5\0\7\0\1\0\1\0\1\0\201\0\5\0\1\0\2\0\2\0"+
    "\4\0\1\0\1\0\6\0\1\0\1\0\3\0\1\0\1\0\1\0"+
    "\24\0\1\0\123\0\1\0\213\0\10\0\246\0\1\0\46\0\2\0"+
    "\1\0\6\0\51\0\6\0\1\0\100\0\33\0\4\0\4\0\30\0"+
    "\1\0\24\0\53\0\43\0\2\0\1\0\143\0\1\0\1\0\17\0"+
    "\2\0\7\0\2\0\12\0\3\0\2\0\1\0\20\0\1\0\1\0"+
    "\36\0\35\0\131\0\13\0\1\0\30\0\41\0\11\0\2\0\4\0"+
    "\1\0\3\0\30\0\4\0\1\0\11\0\1\0\3\0\1\0\27\0"+
    "\31\0\7\0\13\0\5\0\30\0\1\0\6\0\21\0\52\0\72\0"+
    "\66\0\3\0\1\0\22\0\1\0\7\0\12\0\17\0\20\0\4\0"+
    "\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\1\0\3\0"+
    "\4\0\3\0\1\0\20\0\1\0\15\0\2\0\1\0\3\0\16\0"+
    "\4\0\7\0\2\0\10\0\6\0\4\0\2\0\2\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\2\0\1\0\2\0\37\0\4\0\1\0"+
    "\1\0\23\0\3\0\20\0\11\0\1\0\3\0\1\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\3\0\1\0\22\0\1\0\17\0"+
    "\2\0\17\0\1\0\7\0\1\0\13\0\10\0\2\0\2\0\2\0"+
    "\26\0\1\0\7\0\1\0\2\0\1\0\5\0\3\0\1\0\36\0"+
    "\2\0\1\0\3\0\17\0\1\0\21\0\1\0\1\0\6\0\3\0"+
    "\3\0\1\0\4\0\3\0\2\0\1\0\1\0\1\0\2\0\3\0"+
    "\2\0\3\0\3\0\3\0\14\0\26\0\1\0\50\0\1\0\13\0"+
    "\10\0\1\0\3\0\1\0\27\0\1\0\20\0\3\0\1\0\32\0"+
    "\3\0\2\0\1\0\2\0\2\0\36\0\1\0\4\0\10\0\1\0"+
    "\3\0\1\0\27\0\1\0\12\0\1\0\5\0\3\0\1\0\37\0"+
    "\2\0\1\0\2\0\17\0\2\0\21\0\11\0\1\0\3\0\1\0"+
    "\51\0\2\0\1\0\20\0\1\0\5\0\3\0\10\0\3\0\30\0"+
    "\6\0\5\0\22\0\3\0\30\0\1\0\11\0\1\0\1\0\2\0"+
    "\7\0\72\0\60\0\1\0\2\0\13\0\10\0\72\0\2\0\1\0"+
    "\1\0\1\0\5\0\1\0\30\0\1\0\1\0\1\0\12\0\1\0"+
    "\2\0\11\0\1\0\2\0\5\0\1\0\1\0\25\0\4\0\40\0"+
    "\1\0\77\0\10\0\1\0\44\0\33\0\5\0\163\0\53\0\24\0"+
    "\1\0\20\0\6\0\4\0\4\0\3\0\1\0\3\0\2\0\7\0"+
    "\3\0\4\0\15\0\14\0\1\0\21\0\46\0\1\0\1\0\5\0"+
    "\1\0\2\0\53\0\1\0\u014d\0\1\0\4\0\2\0\7\0\1\0"+
    "\1\0\1\0\4\0\2\0\51\0\1\0\4\0\2\0\41\0\1\0"+
    "\4\0\2\0\7\0\1\0\1\0\1\0\4\0\2\0\17\0\1\0"+
    "\71\0\1\0\4\0\2\0\103\0\45\0\20\0\20\0\126\0\2\0"+
    "\6\0\3\0\u026c\0\2\0\21\0\1\0\32\0\5\0\113\0\3\0"+
    "\13\0\7\0\22\0\15\0\23\0\16\0\22\0\16\0\15\0\1\0"+
    "\3\0\17\0\64\0\43\0\1\0\3\0\2\0\103\0\131\0\7\0"+
    "\5\0\2\0\42\0\1\0\1\0\5\0\106\0\12\0\37\0\61\0"+
    "\36\0\2\0\5\0\13\0\54\0\4\0\32\0\66\0\27\0\11\0"+
    "\65\0\122\0\1\0\135\0\57\0\21\0\10\0\66\0\36\0\15\0"+
    "\2\0\12\0\54\0\32\0\44\0\51\0\3\0\12\0\44\0\2\0"+
    "\11\0\7\0\53\0\2\0\3\0\51\0\4\0\1\0\6\0\1\0"+
    "\2\0\3\0\1\0\5\0\300\0\100\0\u0116\0\2\0\6\0\2\0"+
    "\46\0\2\0\6\0\2\0\10\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\37\0\2\0\65\0\1\0\7\0\1\0\1\0\3\0"+
    "\3\0\1\0\7\0\3\0\4\0\2\0\6\0\4\0\15\0\5\0"+
    "\3\0\1\0\7\0\53\0\1\15\1\15\25\0\2\0\23\0\1\0"+
    "\34\0\1\0\15\0\1\0\20\0\15\0\3\0\41\0\101\0\1\0"+
    "\4\0\1\0\2\0\12\0\1\0\1\0\3\0\5\0\6\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\4\0\1\0\13\0\2\0\4\0"+
    "\5\0\5\0\4\0\1\0\21\0\51\0\u0a77\0\345\0\6\0\4\0"+
    "\3\0\2\0\14\0\46\0\1\0\1\0\5\0\1\0\2\0\70\0"+
    "\7\0\1\0\20\0\27\0\11\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\120\0\1\0\u01d5\0\3\0\31\0\11\0\7\0\5\0\2\0\5\0"+
    "\4\0\126\0\6\0\3\0\1\0\132\0\1\0\4\0\5\0\53\0"+
    "\1\0\136\0\21\0\40\0\60\0\20\0\u0200\0\u19c0\0\100\0\u568d\0"+
    "\103\0\56\0\2\0\u010d\0\3\0\20\0\12\0\2\0\24\0\57\0"+
    "\20\0\37\0\2\0\120\0\47\0\11\0\2\0\147\0\2\0\100\0"+
    "\5\0\2\0\1\0\1\0\1\0\5\0\30\0\20\0\1\0\3\0"+
    "\1\0\4\0\1\0\27\0\25\0\1\0\7\0\64\0\16\0\62\0"+
    "\76\0\6\0\3\0\1\0\1\0\2\0\13\0\34\0\12\0\27\0"+
    "\31\0\35\0\7\0\57\0\34\0\1\0\20\0\5\0\1\0\12\0"+
    "\12\0\5\0\1\0\51\0\27\0\3\0\1\0\10\0\24\0\27\0"+
    "\3\0\1\0\3\0\62\0\1\0\1\0\3\0\2\0\2\0\5\0"+
    "\2\0\1\0\1\0\1\0\30\0\3\0\2\0\13\0\7\0\3\0"+
    "\14\0\6\0\2\0\6\0\2\0\6\0\11\0\7\0\1\0\7\0"+
    "\1\0\53\0\1\0\16\0\6\0\163\0\35\0\u2ba4\0\14\0\27\0"+
    "\4\0\61\0\u2104\0\u016e\0\2\0\152\0\46\0\7\0\14\0\5\0"+
    "\5\0\1\0\1\0\12\0\1\0\15\0\1\0\5\0\1\0\1\0"+
    "\1\0\2\0\1\0\2\0\1\0\154\0\41\0\u016b\0\22\0\100\0"+
    "\2\0\66\0\50\0\15\0\66\0\2\0\30\0\3\0\31\0\1\0"+
    "\6\0\5\0\1\0\207\0\7\0\1\0\34\0\32\0\4\0\1\0"+
    "\1\0\32\0\13\0\131\0\3\0\6\0\2\0\6\0\2\0\6\0"+
    "\2\0\3\0\3\0\2\0\3\0\2\0\31\0\14\0\1\0\32\0"+
    "\1\0\23\0\1\0\2\0\1\0\17\0\2\0\16\0\42\0\173\0"+
    "\105\0\65\0\u010b\0\35\0\3\0\61\0\57\0\40\0\15\0\36\0"+
    "\5\0\46\0\12\0\36\0\2\0\44\0\4\0\10\0\1\0\5\0"+
    "\52\0\236\0\22\0\44\0\4\0\44\0\4\0\50\0\10\0\64\0"+
    "\14\0\13\0\1\0\17\0\1\0\7\0\1\0\2\0\1\0\13\0"+
    "\1\0\17\0\1\0\7\0\1\0\2\0\103\0\u0137\0\11\0\26\0"+
    "\12\0\10\0\30\0\6\0\1\0\52\0\1\0\11\0\105\0\6\0"+
    "\2\0\1\0\1\0\54\0\1\0\2\0\3\0\1\0\2\0\27\0"+
    "\12\0\27\0\11\0\37\0\101\0\23\0\1\0\2\0\12\0\26\0"+
    "\12\0\32\0\106\0\70\0\6\0\2\0\100\0\1\0\17\0\4\0"+
    "\1\0\3\0\1\0\35\0\52\0\35\0\3\0\35\0\43\0\10\0"+
    "\1\0\34\0\33\0\66\0\12\0\26\0\12\0\23\0\15\0\22\0"+
    "\156\0\111\0\67\0\63\0\15\0\63\0\15\0\44\0\u015c\0\52\0"+
    "\6\0\2\0\116\0\35\0\12\0\1\0\10\0\26\0\52\0\22\0"+
    "\56\0\25\0\33\0\27\0\14\0\65\0\71\0\2\0\2\0\1\0"+
    "\15\0\55\0\40\0\31\0\32\0\44\0\35\0\1\0\2\0\1\0"+
    "\10\0\43\0\3\0\1\0\14\0\60\0\16\0\4\0\25\0\1\0"+
    "\1\0\1\0\43\0\22\0\1\0\31\0\23\0\2\0\77\0\7\0"+
    "\1\0\1\0\1\0\4\0\1\0\17\0\1\0\12\0\7\0\57\0"+
    "\46\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0"+
    "\1\0\5\0\3\0\1\0\22\0\1\0\14\0\5\0\236\0\65\0"+
    "\22\0\4\0\24\0\3\0\36\0\60\0\24\0\2\0\1\0\1\0"+
    "\270\0\57\0\51\0\4\0\44\0\60\0\24\0\1\0\73\0\53\0"+
    "\15\0\1\0\107\0\33\0\45\0\7\0\271\0\54\0\164\0\100\0"+
    "\37\0\10\0\2\0\1\0\2\0\10\0\1\0\2\0\1\0\30\0"+
    "\17\0\1\0\1\0\1\0\136\0\10\0\2\0\47\0\20\0\1\0"+
    "\1\0\1\0\34\0\1\0\12\0\50\0\7\0\1\0\25\0\1\0"+
    "\13\0\56\0\23\0\1\0\22\0\111\0\u0107\0\11\0\1\0\45\0"+
    "\21\0\1\0\61\0\36\0\160\0\7\0\1\0\2\0\1\0\46\0"+
    "\25\0\1\0\31\0\6\0\1\0\2\0\1\0\40\0\16\0\1\0"+
    "\u0147\0\23\0\17\0\1\0\1\0\15\0\1\0\42\0\174\0\1\0"+
    "\54\0\4\0\37\0\u039a\0\146\0\157\0\21\0\304\0\u0a4c\0\141\0"+
    "\17\0\u0430\0\21\0\6\0\u0fb9\0\u0247\0\u21b9\0\u0239\0\7\0\37\0"+
    "\21\0\117\0\21\0\36\0\22\0\60\0\20\0\4\0\37\0\25\0"+
    "\5\0\23\0\u02b0\0\100\0\200\0\113\0\5\0\1\0\102\0\15\0"+
    "\100\0\2\0\1\0\1\0\34\0\u17f8\0\10\0\u04d6\0\52\0\11\0"+
    "\u22e7\0\4\0\1\0\7\0\1\0\2\0\1\0\u0123\0\17\0\1\0"+
    "\35\0\3\0\2\0\1\0\16\0\4\0\10\0\u018c\0\u0904\0\153\0"+
    "\5\0\15\0\3\0\11\0\7\0\12\0\u1766\0\125\0\1\0\107\0"+
    "\1\0\2\0\2\0\1\0\2\0\2\0\2\0\4\0\1\0\14\0"+
    "\1\0\1\0\1\0\7\0\1\0\101\0\1\0\4\0\2\0\10\0"+
    "\1\0\7\0\1\0\34\0\1\0\4\0\1\0\5\0\1\0\1\0"+
    "\3\0\7\0\1\0\u0154\0\2\0\31\0\1\0\31\0\1\0\37\0"+
    "\1\0\31\0\1\0\37\0\1\0\31\0\1\0\37\0\1\0\31\0"+
    "\1\0\37\0\1\0\31\0\1\0\10\0\u0734\0\37\0\6\0\6\0"+
    "\u0105\0\76\0\222\0\55\0\12\0\7\0\20\0\1\0\u0141\0\36\0"+
    "\22\0\54\0\23\0\1\0\u01d0\0\34\0\u02f4\0\7\0\1\0\4\0"+
    "\1\0\2\0\1\0\17\0\1\0\305\0\73\0\104\0\7\0\1\0"+
    "\u0364\0\1\0\u014f\0\4\0\1\0\33\0\1\0\2\0\1\0\1\0"+
    "\2\0\1\0\1\0\12\0\1\0\4\0\1\0\1\0\1\0\1\0"+
    "\6\0\1\0\4\0\1\0\1\0\1\0\1\0\1\0\1\0\3\0"+
    "\1\0\2\0\1\0\1\0\2\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0\2\0\4\0"+
    "\1\0\7\0\1\0\4\0\1\0\4\0\1\0\1\0\1\0\12\0"+
    "\1\0\21\0\5\0\3\0\1\0\5\0\1\0\21\0\u1144\0\ua6e0\0"+
    "\40\0\u103a\0\6\0\336\0\2\0\u1682\0\16\0\u1d31\0\u0c1f\0\u021e\0"+
    "\u05e2\0\u134b\0\5\0\u1060\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udc5d\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\2\1\1\5\1\6"+
    "\1\7\1\6\1\10\1\11\17\3\2\1\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\1\0\1\30\1\31"+
    "\1\0\1\32\1\6\1\33\1\34\1\35\33\3\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\0\1\47\2\3\1\50\3\3\1\51\35\3\1\52"+
    "\2\3\1\53\1\3\1\54\13\3\1\55\1\56\1\3"+
    "\1\57\10\3\1\60\1\3\1\61\1\62\1\63\1\64"+
    "\1\65\1\3\1\66\1\3\1\67\1\3\1\70\2\3"+
    "\1\71\1\72\1\3\1\73\3\3\1\74\1\75\10\3"+
    "\1\76\1\77\3\3\1\100\1\101\3\3\1\102\10\3"+
    "\1\103\11\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\70\0\u0118\0\u0150"+
    "\0\u0188\0\70\0\u01c0\0\u01f8\0\u0230\0\70\0\u0268\0\u02a0"+
    "\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460"+
    "\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620"+
    "\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\u0770\0\u0118\0\70\0\u07a8"+
    "\0\70\0\70\0\u07e0\0\70\0\u0818\0\70\0\u0850\0\250"+
    "\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\u0770\0\u0e70\0\250\0\u0ea8\0\u0ee0"+
    "\0\250\0\u0f18\0\u0f50\0\u0f88\0\250\0\u0fc0\0\u0ff8\0\u1030"+
    "\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8\0\u11f0"+
    "\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0"+
    "\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570"+
    "\0\u15a8\0\u15e0\0\250\0\u1618\0\u1650\0\250\0\u1688\0\250"+
    "\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8\0\u1810\0\u1848"+
    "\0\u1880\0\u18b8\0\u18f0\0\250\0\250\0\u1928\0\250\0\u1960"+
    "\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\250"+
    "\0\u1b20\0\250\0\250\0\250\0\250\0\250\0\u1b58\0\250"+
    "\0\u1b90\0\250\0\u1bc8\0\250\0\u1c00\0\u1c38\0\250\0\250"+
    "\0\u1c70\0\250\0\u1ca8\0\u1ce0\0\u1d18\0\250\0\250\0\u1d50"+
    "\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1ea0\0\u1ed8\0\250"+
    "\0\250\0\u1f10\0\u1f48\0\u1f80\0\250\0\250\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\250\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178"+
    "\0\u21b0\0\u21e8\0\250\0\u2220\0\u2258\0\u2290\0\u22c8\0\u2300"+
    "\0\u2338\0\u2370\0\u23a8\0\u23e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\14\1\0\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\4\1\23\1\24\1\25"+
    "\1\26\1\4\1\27\1\4\1\30\1\4\1\31\1\3"+
    "\2\4\1\32\1\4\1\33\1\34\1\35\2\4\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\71\0\1\3"+
    "\15\0\1\55\17\0\1\3\31\0\3\4\14\0\31\4"+
    "\24\0\1\6\62\0\5\56\1\0\1\57\1\56\1\0"+
    "\57\56\7\60\1\61\1\0\57\60\1\0\1\3\35\0"+
    "\1\3\13\0\1\62\25\0\1\63\1\0\1\14\37\0"+
    "\1\64\14\0\4\14\2\65\62\14\1\0\1\3\35\0"+
    "\1\3\13\0\1\66\15\0\3\4\14\0\1\4\1\67"+
    "\1\4\1\70\21\4\1\71\3\4\20\0\3\4\14\0"+
    "\16\4\1\72\12\4\20\0\3\4\14\0\1\73\11\4"+
    "\1\74\16\4\20\0\3\4\14\0\4\4\1\75\1\76"+
    "\1\77\14\4\1\100\5\4\20\0\3\4\14\0\14\4"+
    "\1\101\14\4\20\0\3\4\14\0\6\4\1\102\3\4"+
    "\1\103\16\4\20\0\3\4\14\0\4\4\1\104\1\105"+
    "\3\4\1\106\17\4\20\0\3\4\14\0\2\4\1\107"+
    "\26\4\20\0\3\4\14\0\6\4\1\110\7\4\1\111"+
    "\12\4\20\0\3\4\14\0\5\4\1\112\4\4\1\113"+
    "\16\4\20\0\3\4\14\0\4\4\1\114\14\4\1\115"+
    "\7\4\20\0\3\4\14\0\5\4\1\116\10\4\1\117"+
    "\12\4\20\0\3\4\14\0\11\4\1\120\17\4\20\0"+
    "\3\4\14\0\5\4\1\121\23\4\20\0\3\4\14\0"+
    "\11\4\1\122\1\123\16\4\70\0\1\124\70\0\1\125"+
    "\70\0\1\126\67\0\1\127\67\0\1\130\67\0\1\131"+
    "\67\0\1\132\67\0\1\133\15\0\1\134\35\0\1\134"+
    "\37\0\1\61\60\0\11\63\1\135\1\63\1\0\54\63"+
    "\4\0\2\65\63\0\3\4\14\0\2\4\1\136\23\4"+
    "\1\137\2\4\20\0\3\4\14\0\26\4\1\140\2\4"+
    "\20\0\3\4\14\0\24\4\1\141\4\4\20\0\3\4"+
    "\14\0\25\4\1\142\3\4\20\0\3\4\14\0\23\4"+
    "\1\143\5\4\20\0\3\4\14\0\5\4\1\144\23\4"+
    "\20\0\3\4\14\0\12\4\1\145\16\4\20\0\3\4"+
    "\14\0\4\4\1\146\24\4\20\0\3\4\14\0\1\4"+
    "\1\147\27\4\20\0\3\4\14\0\27\4\1\150\1\4"+
    "\20\0\3\4\14\0\14\4\1\151\14\4\20\0\3\4"+
    "\14\0\12\4\1\152\16\4\20\0\3\4\14\0\6\4"+
    "\1\153\22\4\20\0\3\4\14\0\1\4\1\154\2\4"+
    "\1\155\24\4\20\0\3\4\14\0\6\4\1\156\22\4"+
    "\20\0\3\4\14\0\6\4\1\157\3\4\1\160\16\4"+
    "\20\0\3\4\14\0\1\4\1\161\27\4\20\0\3\4"+
    "\14\0\2\4\1\162\4\4\1\163\1\164\20\4\20\0"+
    "\3\4\14\0\5\4\1\165\23\4\20\0\3\4\14\0"+
    "\16\4\1\166\12\4\20\0\3\4\14\0\1\167\7\4"+
    "\1\170\20\4\20\0\3\4\14\0\2\4\1\171\26\4"+
    "\20\0\3\4\14\0\1\172\30\4\20\0\3\4\14\0"+
    "\7\4\1\173\21\4\20\0\3\4\14\0\1\174\30\4"+
    "\20\0\3\4\14\0\22\4\1\175\6\4\20\0\3\4"+
    "\14\0\15\4\1\176\13\4\20\0\3\4\14\0\1\177"+
    "\30\4\32\0\1\12\55\0\3\4\14\0\23\4\1\200"+
    "\5\4\20\0\3\4\14\0\5\4\1\201\23\4\20\0"+
    "\3\4\14\0\16\4\1\202\12\4\20\0\3\4\14\0"+
    "\16\4\1\203\12\4\20\0\3\4\14\0\6\4\1\204"+
    "\22\4\20\0\3\4\14\0\10\4\1\205\20\4\20\0"+
    "\3\4\14\0\7\4\1\206\21\4\20\0\3\4\14\0"+
    "\16\4\1\207\12\4\20\0\3\4\14\0\14\4\1\210"+
    "\14\4\20\0\3\4\14\0\6\4\1\211\22\4\20\0"+
    "\3\4\14\0\10\4\1\212\20\4\20\0\3\4\14\0"+
    "\10\4\1\213\20\4\20\0\3\4\14\0\5\4\1\214"+
    "\23\4\20\0\3\4\14\0\12\4\1\136\16\4\20\0"+
    "\3\4\14\0\12\4\1\215\16\4\20\0\3\4\14\0"+
    "\1\216\30\4\20\0\3\4\14\0\13\4\1\217\15\4"+
    "\20\0\3\4\14\0\23\4\1\220\5\4\20\0\3\4"+
    "\14\0\2\4\1\221\26\4\20\0\3\4\14\0\5\4"+
    "\1\222\23\4\20\0\3\4\14\0\4\4\1\136\24\4"+
    "\20\0\3\4\14\0\6\4\1\223\22\4\20\0\3\4"+
    "\14\0\3\4\1\224\25\4\20\0\3\4\14\0\16\4"+
    "\1\225\12\4\20\0\3\4\14\0\16\4\1\226\12\4"+
    "\20\0\3\4\14\0\20\4\1\227\10\4\20\0\3\4"+
    "\14\0\2\4\1\230\26\4\20\0\3\4\14\0\4\4"+
    "\1\231\24\4\20\0\3\4\14\0\16\4\1\232\12\4"+
    "\20\0\3\4\14\0\10\4\1\233\20\4\20\0\3\4"+
    "\14\0\1\4\1\234\27\4\20\0\3\4\14\0\2\4"+
    "\1\235\26\4\20\0\3\4\14\0\12\4\1\236\16\4"+
    "\20\0\3\4\14\0\10\4\1\237\20\4\20\0\3\4"+
    "\14\0\2\4\1\136\26\4\20\0\3\4\14\0\16\4"+
    "\1\240\12\4\20\0\3\4\14\0\7\4\1\241\21\4"+
    "\20\0\3\4\14\0\15\4\1\242\13\4\20\0\3\4"+
    "\14\0\10\4\1\243\20\4\20\0\3\4\14\0\2\4"+
    "\1\244\26\4\20\0\3\4\14\0\12\4\1\245\16\4"+
    "\20\0\3\4\14\0\2\4\1\246\26\4\20\0\3\4"+
    "\14\0\1\4\1\247\27\4\20\0\3\4\14\0\16\4"+
    "\1\250\12\4\20\0\3\4\14\0\12\4\1\251\16\4"+
    "\20\0\3\4\14\0\17\4\1\252\11\4\20\0\3\4"+
    "\14\0\23\4\1\253\5\4\20\0\3\4\14\0\30\4"+
    "\1\254\20\0\3\4\14\0\1\4\1\255\27\4\20\0"+
    "\3\4\14\0\5\4\1\256\23\4\20\0\3\4\14\0"+
    "\16\4\1\257\12\4\20\0\3\4\14\0\12\4\1\260"+
    "\16\4\20\0\3\4\14\0\1\261\30\4\20\0\3\4"+
    "\14\0\2\4\1\262\26\4\20\0\3\4\14\0\16\4"+
    "\1\263\12\4\20\0\3\4\14\0\2\4\1\264\26\4"+
    "\20\0\3\4\14\0\26\4\1\265\2\4\20\0\3\4"+
    "\14\0\2\4\1\266\26\4\20\0\3\4\14\0\13\4"+
    "\1\136\15\4\20\0\3\4\14\0\1\4\1\267\27\4"+
    "\20\0\3\4\14\0\12\4\1\270\16\4\20\0\3\4"+
    "\14\0\20\4\1\271\10\4\20\0\3\4\14\0\12\4"+
    "\1\272\16\4\20\0\3\4\14\0\7\4\1\273\21\4"+
    "\20\0\3\4\14\0\22\4\1\274\6\4\20\0\3\4"+
    "\14\0\6\4\1\275\22\4\20\0\3\4\14\0\6\4"+
    "\1\276\22\4\20\0\3\4\14\0\7\4\1\277\21\4"+
    "\20\0\3\4\14\0\10\4\1\300\20\4\20\0\3\4"+
    "\14\0\17\4\1\301\11\4\20\0\3\4\14\0\10\4"+
    "\1\302\20\4\20\0\3\4\14\0\16\4\1\303\12\4"+
    "\20\0\3\4\14\0\4\4\1\304\24\4\20\0\3\4"+
    "\14\0\1\4\1\305\27\4\20\0\3\4\14\0\16\4"+
    "\1\306\12\4\20\0\3\4\14\0\10\4\1\307\3\4"+
    "\1\310\14\4\20\0\3\4\14\0\1\4\1\311\27\4"+
    "\20\0\3\4\14\0\4\4\1\312\24\4\20\0\3\4"+
    "\14\0\11\4\1\313\17\4\20\0\3\4\14\0\5\4"+
    "\1\314\23\4\20\0\3\4\14\0\2\4\1\315\26\4"+
    "\20\0\3\4\14\0\6\4\1\316\22\4\20\0\3\4"+
    "\14\0\20\4\1\317\10\4\20\0\3\4\14\0\25\4"+
    "\1\320\2\4\1\321\20\0\3\4\14\0\26\4\1\322"+
    "\2\4\20\0\3\4\14\0\15\4\1\323\13\4\20\0"+
    "\3\4\14\0\5\4\1\324\23\4\20\0\3\4\14\0"+
    "\16\4\1\317\12\4\20\0\3\4\14\0\16\4\1\323"+
    "\12\4\20\0\3\4\14\0\23\4\1\325\5\4\20\0"+
    "\3\4\14\0\10\4\1\326\20\4\20\0\3\4\14\0"+
    "\16\4\1\327\12\4\20\0\3\4\14\0\14\4\1\330"+
    "\14\4\20\0\3\4\14\0\23\4\1\331\5\4\20\0"+
    "\3\4\14\0\2\4\1\332\26\4\20\0\3\4\14\0"+
    "\2\4\1\333\26\4\20\0\3\4\14\0\5\4\1\334"+
    "\23\4\20\0\3\4\14\0\1\4\1\323\27\4\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\3\1\1\11\3\1\1\11"+
    "\27\1\7\11\2\0\1\11\1\0\2\11\1\0\1\11"+
    "\1\1\1\11\35\1\10\11\1\1\1\0\177\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Codigo de usuario
    public TablaErrores tablaError = new TablaErrores();
    public TablaToken tablaToken = new TablaToken();
    
    private Symbol symbol (int type, Object value){
      return new Symbol(type,yyline,yycolumn,value);
    }
    private Symbol symbol (int type){
      return new Symbol(type,yyline,yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2996) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return new Symbol(sym.error,yychar,yyline,yytext());
            }
          case 68: break;
          case 2: 
            { return new Symbol(sym.numEntero,yychar,yyline,yytext());
            }
          case 69: break;
          case 3: 
            { return new Symbol(sym.identificador,yychar,yyline,yytext());
            }
          case 70: break;
          case 4: 
            { return new Symbol(sym.FinDeLinea,yychar,yyline,yytext());
            }
          case 71: break;
          case 5: 
            { return new Symbol(sym.resta,yychar,yyline,yytext());
            }
          case 72: break;
          case 6: 
            { /**/
            }
          case 73: break;
          case 7: 
            { return new Symbol(sym.div,yychar,yyline,yytext());
            }
          case 74: break;
          case 8: 
            { return new Symbol(sym.mas,yychar,yyline,yytext());
            }
          case 75: break;
          case 9: 
            { return new Symbol(sym.opAccMiembros,yychar,yyline,yytext());
            }
          case 76: break;
          case 10: 
            { return new Symbol(sym.igual,yychar,yyline,yytext());
            }
          case 77: break;
          case 11: 
            { return new Symbol(sym.mod,yychar,yyline,yytext());
            }
          case 78: break;
          case 12: 
            { return new Symbol(sym.mul,yychar,yyline,yytext());
            }
          case 79: break;
          case 13: 
            { return new Symbol(sym.not,yychar,yyline,yytext());
            }
          case 80: break;
          case 14: 
            { return new Symbol(sym.mayor,yychar,yyline,yytext());
            }
          case 81: break;
          case 15: 
            { return new Symbol(sym.menor,yychar,yyline,yytext());
            }
          case 82: break;
          case 16: 
            { return new Symbol(sym.llave_A,yychar,yyline,yytext());
            }
          case 83: break;
          case 17: 
            { return new Symbol(sym.llave_C,yychar,yyline,yytext());
            }
          case 84: break;
          case 18: 
            { return new Symbol(sym.corch_A,yychar,yyline,yytext());
            }
          case 85: break;
          case 19: 
            { return new Symbol(sym.corch_C,yychar,yyline,yytext());
            }
          case 86: break;
          case 20: 
            { return new Symbol(sym.paren_A,yychar,yyline,yytext());
            }
          case 87: break;
          case 21: 
            { return new Symbol(sym.paren_C,yychar,yyline,yytext());
            }
          case 88: break;
          case 22: 
            { return new Symbol(sym.coma,yychar,yyline,yytext());
            }
          case 89: break;
          case 23: 
            { return new Symbol(sym.cadCaracteres,yychar,yyline,yytext());
            }
          case 90: break;
          case 24: 
            { return new Symbol(sym.cadChar,yychar,yyline,yytext());
            }
          case 91: break;
          case 25: 
            { return new Symbol(sym.menosIgual,yychar,yyline,yytext());
            }
          case 92: break;
          case 26: 
            { return new Symbol(sym.divIgual,yychar,yyline,yytext());
            }
          case 93: break;
          case 27: 
            { return new Symbol(sym.masIgual,yychar,yyline,yytext());
            }
          case 94: break;
          case 28: 
            { return new Symbol(sym.in,yychar,yyline,yytext());
            }
          case 95: break;
          case 29: 
            { return new Symbol(sym.if,yychar,yyline,yytext());
            }
          case 96: break;
          case 30: 
            { return new Symbol(sym.or,yychar,yyline,yytext());
            }
          case 97: break;
          case 31: 
            { return new Symbol(sym.and,yychar,yyline,yytext());
            }
          case 98: break;
          case 32: 
            { return new Symbol(sym.igualIgual,yychar,yyline,yytext());
            }
          case 99: break;
          case 33: 
            { return new Symbol(sym.modIgual,yychar,yyline,yytext());
            }
          case 100: break;
          case 34: 
            { return new Symbol(sym.porIgual,yychar,yyline,yytext());
            }
          case 101: break;
          case 35: 
            { return new Symbol(sym.notIgual,yychar,yyline,yytext());
            }
          case 102: break;
          case 36: 
            { return new Symbol(sym.mayorIgual,yychar,yyline,yytext());
            }
          case 103: break;
          case 37: 
            { return new Symbol(sym.menorIgual,yychar,yyline,yytext());
            }
          case 104: break;
          case 38: 
            { return new Symbol(sym.numFloat,yychar,yyline,yytext());
            }
          case 105: break;
          case 39: 
            { return new Symbol(sym.tipoDato,yychar,yyline,yytext());
            }
          case 106: break;
          case 40: 
            { return new Symbol(sym.new,yychar,yyline,yytext());
            }
          case 107: break;
          case 41: 
            { return new Symbol(sym.for,yychar,yyline,yytext());
            }
          case 108: break;
          case 42: 
            { return new Symbol(sym.true,yychar,yyline,yytext());
            }
          case 109: break;
          case 43: 
            { return new Symbol(sym.func,yychar,yyline,yytext());
            }
          case 110: break;
          case 44: 
            { return new Symbol(sym.aabb,yychar,yyline,yytext());
            }
          case 111: break;
          case 45: 
            { return new Symbol(sym.elif,yychar,yyline,yytext());
            }
          case 112: break;
          case 46: 
            { return new Symbol(sym.else,yychar,yyline,yytext());
            }
          case 113: break;
          case 47: 
            { return new Symbol(sym.void,yychar,yyline,yytext());
            }
          case 114: break;
          case 48: 
            { return new Symbol(sym.false,yychar,yyline,yytext());
            }
          case 115: break;
          case 49: 
            { return new Symbol(sym.array,yychar,yyline,yytext());
            }
          case 116: break;
          case 50: 
            { return new Symbol(sym.classP,yychar,yyline,yytext());
            }
          case 117: break;
          case 51: 
            { return new Symbol(sym.constante,yychar,yyline,yytext());
            }
          case 118: break;
          case 52: 
            { return new Symbol(sym.color,yychar,yyline,yytext());
            }
          case 119: break;
          case 53: 
            { return new Symbol(sym.startP,yychar,yyline,yytext());
            }
          case 120: break;
          case 54: 
            { return new Symbol(sym.range,yychar,yyline,yytext());
            }
          case 121: break;
          case 55: 
            { return new Symbol(sym.rect2,yychar,yyline,yytext());
            }
          case 122: break;
          case 56: 
            { return new Symbol(sym.break,yychar,yyline,yytext());
            }
          case 123: break;
          case 57: 
            { return new Symbol(sym.while,yychar,yyline,yytext());
            }
          case 124: break;
          case 58: 
            { return new Symbol(sym.mover,yychar,yyline,yytext());
            }
          case 125: break;
          case 59: 
            { return new Symbol(sym.print,yychar,yyline,yytext());
            }
          case 126: break;
          case 60: 
            { return new Symbol(sym.object,yychar,yyline,yytext());
            }
          case 127: break;
          case 61: 
            { return new Symbol(sym.return,yychar,yyline,yytext());
            }
          case 128: break;
          case 62: 
            { return new Symbol(sym.extendsP,yychar,yyline,yytext());
            }
          case 129: break;
          case 63: 
            { return new Symbol(sym.vector2,yychar,yyline,yytext());
            }
          case 130: break;
          case 64: 
            { return new Symbol(sym.timeSpan,yychar,yyline,yytext());
            }
          case 131: break;
          case 65: 
            { return new Symbol(sym.resource,yychar,yyline,yytext());
            }
          case 132: break;
          case 66: 
            { return new Symbol(sym.importAll,yychar,yyline,yytext());
            }
          case 133: break;
          case 67: 
            { return new Symbol(sym.funcionInterna,yychar,yyline,yytext());
            }
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
