/* The following code was generated by JFlex 1.4.1 on 09/11/23, 00:32 */


package AnalisisLexico;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 09/11/23, 00:32 from the specification file
 * <tt>C:/Users/cesar/OneDrive/Documentos/NetBeansProjects/GCKCompiler/src/AnalisisLexico/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     9,  9,  9,  9,  9,  9,  9,  9,  9,  5,  4,  0,  5,  3,  9,  9, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0, 
     5, 51,  8,  0,  1, 50, 55,  0, 53, 53, 50, 10, 54,  7, 11,  6, 
     2,  2, 31,  2,  2,  2,  2,  2,  2,  2, 54,  0, 52, 49, 52,  0, 
     0, 26, 39, 28, 32, 47, 36,  1,  1,  1,  1,  1,  1,  1,  1, 43, 
    45,  1, 29, 23, 40,  1, 35,  1,  1,  1,  1, 53,  0, 53,  0,  1, 
     0, 18, 25, 19, 34, 30, 15, 24, 21, 12, 44, 48, 16, 41, 13, 17, 
    42,  1, 22, 20, 14, 37, 46, 38, 33, 27,  1, 53, 56, 53,  0,  9
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\4\2\5\1\1\1\6"+
    "\26\2\1\7\1\5\1\10\1\11\1\12\1\13\2\1"+
    "\1\14\1\15\2\0\1\7\1\3\2\0\1\16\1\15"+
    "\1\2\1\17\35\2\1\11\1\10\1\20\1\15\2\0"+
    "\32\2\1\4\1\0\16\2\1\15\27\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\71\0\u011d\0\u0156"+
    "\0\u018f\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e"+
    "\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6"+
    "\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae"+
    "\0\u06e7\0\u0720\0\u06e7\0\u06e7\0\71\0\71\0\u0759\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\71\0\u08af\0\u01c8\0\u018f"+
    "\0\u018f\0\u08e8\0\u0921\0\162\0\u095a\0\u0993\0\u09cc\0\u0a05"+
    "\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd"+
    "\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95"+
    "\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d"+
    "\0\u0f96\0\71\0\71\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3"+
    "\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b"+
    "\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443"+
    "\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b"+
    "\0\u1644\0\u0876\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a"+
    "\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962"+
    "\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a"+
    "\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\10\1\11"+
    "\1\2\1\10\1\12\1\13\1\14\1\15\1\16\3\3"+
    "\1\17\2\3\1\20\1\21\1\3\1\22\1\23\1\3"+
    "\1\24\1\25\1\26\1\4\1\27\2\3\1\30\1\31"+
    "\1\3\1\32\1\3\1\33\1\3\1\34\1\35\1\3"+
    "\1\36\1\37\1\40\1\3\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\72\0\2\3\6\0\1\3"+
    "\2\0\45\3\11\0\1\51\1\4\10\0\1\52\23\51"+
    "\1\4\21\51\14\0\1\6\72\0\1\53\1\54\51\0"+
    "\1\55\11\0\1\56\10\0\1\57\23\0\1\56\21\0"+
    "\1\55\7\0\3\60\2\0\3\60\1\61\60\60\2\0"+
    "\1\62\10\0\1\57\23\0\1\62\32\0\2\3\6\0"+
    "\1\3\2\0\1\3\1\63\1\3\1\64\41\3\11\0"+
    "\2\3\6\0\1\3\2\0\22\3\1\65\22\3\11\0"+
    "\2\3\6\0\1\3\2\0\12\3\1\66\32\3\11\0"+
    "\2\3\6\0\1\3\2\0\4\3\1\67\1\70\1\71"+
    "\22\3\1\72\13\3\11\0\2\3\6\0\1\3\2\0"+
    "\4\3\1\73\1\74\3\3\1\75\33\3\11\0\2\3"+
    "\6\0\1\3\2\0\22\3\1\76\22\3\11\0\2\3"+
    "\6\0\1\3\2\0\2\3\1\77\4\3\1\100\35\3"+
    "\11\0\2\3\6\0\1\3\2\0\5\3\1\101\4\3"+
    "\1\102\32\3\11\0\2\3\6\0\1\3\2\0\12\3"+
    "\1\103\3\3\1\104\26\3\11\0\2\3\6\0\1\3"+
    "\2\0\5\3\1\105\37\3\11\0\2\3\6\0\1\3"+
    "\2\0\22\3\1\106\22\3\11\0\2\3\6\0\1\3"+
    "\2\0\4\3\1\107\20\3\1\110\17\3\11\0\2\3"+
    "\6\0\1\3\2\0\1\111\44\3\11\0\2\3\6\0"+
    "\1\3\2\0\22\3\1\112\22\3\11\0\2\3\6\0"+
    "\1\3\2\0\1\113\44\3\11\0\2\3\6\0\1\3"+
    "\2\0\11\3\1\31\33\3\11\0\2\3\6\0\1\3"+
    "\2\0\1\114\44\3\11\0\2\3\6\0\1\3\2\0"+
    "\12\3\1\115\32\3\11\0\2\3\6\0\1\3\2\0"+
    "\15\3\1\116\27\3\11\0\2\3\6\0\1\3\2\0"+
    "\11\3\1\117\33\3\11\0\2\3\6\0\1\3\2\0"+
    "\5\3\1\120\37\3\11\0\2\3\6\0\1\3\2\0"+
    "\12\3\1\121\32\3\71\0\1\122\70\0\1\55\76\0"+
    "\1\123\71\0\1\123\1\0\2\51\6\0\1\51\2\0"+
    "\45\51\12\0\1\124\10\0\1\125\23\0\1\124\31\0"+
    "\3\53\1\5\1\6\64\53\3\54\2\0\2\54\1\126"+
    "\61\54\2\0\1\56\10\0\1\52\23\0\1\56\33\0"+
    "\1\62\10\0\1\127\23\0\1\62\32\0\2\3\6\0"+
    "\1\3\2\0\2\3\1\64\42\3\11\0\2\3\6\0"+
    "\1\3\2\0\32\3\1\64\12\3\11\0\2\3\6\0"+
    "\1\3\2\0\31\3\1\130\13\3\11\0\2\3\6\0"+
    "\1\3\2\0\5\3\1\131\37\3\11\0\2\3\6\0"+
    "\1\3\2\0\12\3\1\64\32\3\11\0\2\3\6\0"+
    "\1\3\2\0\4\3\1\132\40\3\11\0\2\3\6\0"+
    "\1\3\2\0\1\3\1\133\43\3\11\0\2\3\6\0"+
    "\1\3\2\0\6\3\1\134\36\3\11\0\2\3\6\0"+
    "\1\3\2\0\1\3\1\135\43\3\11\0\2\3\6\0"+
    "\1\3\2\0\6\3\1\70\36\3\11\0\2\3\6\0"+
    "\1\3\2\0\2\3\1\136\42\3\11\0\2\3\6\0"+
    "\1\3\2\0\6\3\1\137\3\3\1\140\32\3\11\0"+
    "\2\3\6\0\1\3\2\0\22\3\1\141\22\3\11\0"+
    "\2\3\6\0\1\3\2\0\5\3\1\142\37\3\11\0"+
    "\2\3\6\0\1\3\2\0\22\3\1\143\22\3\11\0"+
    "\2\3\6\0\1\3\2\0\12\3\1\144\32\3\11\0"+
    "\2\3\6\0\1\3\2\0\33\3\1\145\11\3\11\0"+
    "\2\3\6\0\1\3\2\0\4\3\1\146\40\3\11\0"+
    "\2\3\6\0\1\3\2\0\7\3\1\147\1\150\34\3"+
    "\11\0\2\3\6\0\1\3\2\0\1\151\7\3\1\130"+
    "\34\3\11\0\2\3\6\0\1\3\2\0\2\3\1\152"+
    "\42\3\11\0\2\3\6\0\1\3\2\0\7\3\1\153"+
    "\35\3\11\0\2\3\6\0\1\3\2\0\7\3\1\154"+
    "\35\3\11\0\2\3\6\0\1\3\2\0\4\3\1\130"+
    "\40\3\11\0\2\3\6\0\1\3\2\0\35\3\1\155"+
    "\7\3\11\0\2\3\6\0\1\3\2\0\1\156\44\3"+
    "\11\0\2\3\6\0\1\3\2\0\40\3\1\157\4\3"+
    "\11\0\2\3\6\0\1\3\2\0\17\3\1\160\25\3"+
    "\11\0\2\3\6\0\1\3\2\0\1\161\44\3\11\0"+
    "\2\3\6\0\1\3\2\0\12\3\1\146\32\3\12\0"+
    "\1\124\34\0\1\124\44\0\1\125\55\0\3\54\2\0"+
    "\1\54\1\162\1\126\61\54\13\0\1\163\56\0\2\3"+
    "\6\0\1\3\2\0\22\3\1\64\22\3\11\0\2\3"+
    "\6\0\1\3\2\0\6\3\1\63\36\3\11\0\2\3"+
    "\6\0\1\3\2\0\10\3\1\130\34\3\11\0\2\3"+
    "\6\0\1\3\2\0\7\3\1\64\35\3\11\0\2\3"+
    "\6\0\1\3\2\0\10\3\1\164\34\3\11\0\2\3"+
    "\6\0\1\3\2\0\10\3\1\63\34\3\11\0\2\3"+
    "\6\0\1\3\2\0\31\3\1\165\13\3\11\0\2\3"+
    "\6\0\1\3\2\0\12\3\1\63\32\3\11\0\2\3"+
    "\6\0\1\3\2\0\1\166\44\3\11\0\2\3\6\0"+
    "\1\3\2\0\1\3\1\167\43\3\11\0\2\3\6\0"+
    "\1\3\2\0\4\3\1\64\40\3\11\0\2\3\6\0"+
    "\1\3\2\0\6\3\1\170\36\3\11\0\2\3\6\0"+
    "\1\3\2\0\6\3\1\171\36\3\11\0\2\3\6\0"+
    "\1\3\2\0\33\3\1\64\11\3\11\0\2\3\6\0"+
    "\1\3\2\0\5\3\1\70\37\3\11\0\2\3\6\0"+
    "\1\3\2\0\2\3\1\172\42\3\11\0\2\3\6\0"+
    "\1\3\2\0\5\3\1\173\37\3\11\0\2\3\6\0"+
    "\1\3\2\0\3\3\1\64\41\3\11\0\2\3\6\0"+
    "\1\3\2\0\22\3\1\174\22\3\11\0\2\3\6\0"+
    "\1\3\2\0\2\3\1\175\42\3\11\0\2\3\6\0"+
    "\1\3\2\0\2\3\1\176\42\3\11\0\2\3\6\0"+
    "\1\3\2\0\22\3\1\177\22\3\11\0\2\3\6\0"+
    "\1\3\2\0\1\3\1\63\43\3\11\0\2\3\6\0"+
    "\1\3\2\0\22\3\1\200\22\3\11\0\2\3\6\0"+
    "\1\3\2\0\10\3\1\201\34\3\11\0\2\3\6\0"+
    "\1\3\2\0\26\3\1\64\16\3\12\0\1\202\10\0"+
    "\1\163\23\0\1\202\32\0\2\3\6\0\1\3\2\0"+
    "\10\3\1\64\34\3\11\0\2\3\6\0\1\3\2\0"+
    "\12\3\1\203\32\3\11\0\2\3\6\0\1\3\2\0"+
    "\1\3\1\204\43\3\11\0\2\3\6\0\1\3\2\0"+
    "\22\3\1\205\22\3\11\0\2\3\6\0\1\3\2\0"+
    "\44\3\1\64\11\0\2\3\6\0\1\3\2\0\17\3"+
    "\1\64\25\3\11\0\2\3\6\0\1\3\2\0\23\3"+
    "\1\64\21\3\11\0\2\3\6\0\1\3\2\0\31\3"+
    "\1\206\13\3\11\0\2\3\6\0\1\3\2\0\1\3"+
    "\1\207\43\3\11\0\2\3\6\0\1\3\2\0\1\210"+
    "\44\3\11\0\2\3\6\0\1\3\2\0\5\3\1\211"+
    "\37\3\11\0\2\3\6\0\1\3\2\0\13\3\1\212"+
    "\31\3\11\0\2\3\6\0\1\3\2\0\7\3\1\63"+
    "\35\3\11\0\2\3\6\0\1\3\2\0\1\213\44\3"+
    "\12\0\1\202\34\0\1\202\32\0\2\3\6\0\1\3"+
    "\2\0\1\3\1\64\43\3\11\0\2\3\6\0\1\3"+
    "\2\0\14\3\1\64\30\3\11\0\2\3\6\0\1\3"+
    "\2\0\34\3\1\214\10\3\11\0\2\3\6\0\1\3"+
    "\2\0\12\3\1\215\32\3\11\0\2\3\6\0\1\3"+
    "\2\0\26\3\1\164\16\3\11\0\2\3\6\0\1\3"+
    "\2\0\5\3\1\216\37\3\11\0\2\3\6\0\1\3"+
    "\2\0\12\3\1\172\32\3\11\0\2\3\6\0\1\3"+
    "\2\0\36\3\1\217\6\3\11\0\2\3\6\0\1\3"+
    "\2\0\7\3\1\220\35\3\11\0\2\3\6\0\1\3"+
    "\2\0\12\3\1\221\32\3\11\0\2\3\6\0\1\3"+
    "\2\0\7\3\1\130\35\3\11\0\2\3\6\0\1\3"+
    "\2\0\1\3\1\222\43\3\11\0\2\3\6\0\1\3"+
    "\2\0\6\3\1\203\36\3\11\0\2\3\6\0\1\3"+
    "\2\0\10\3\1\223\34\3\11\0\2\3\6\0\1\3"+
    "\2\0\22\3\1\130\22\3\11\0\2\3\6\0\1\3"+
    "\2\0\6\3\1\224\36\3\11\0\2\3\6\0\1\3"+
    "\2\0\13\3\1\225\17\3\1\226\11\3\11\0\2\3"+
    "\6\0\1\3\2\0\12\3\1\171\32\3\11\0\2\3"+
    "\6\0\1\3\2\0\11\3\1\227\33\3\11\0\2\3"+
    "\6\0\1\3\2\0\5\3\1\230\37\3\11\0\2\3"+
    "\6\0\1\3\2\0\6\3\1\231\36\3\11\0\2\3"+
    "\6\0\1\3\2\0\26\3\1\171\16\3\11\0\2\3"+
    "\6\0\1\3\2\0\36\3\1\130\6\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7980];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\36\1\2\11\4\1\2\0"+
    "\1\11\1\1\2\0\41\1\2\11\2\1\2\0\33\1"+
    "\1\0\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    //Codigo de usuario
    public TablaErrores tablaError = new TablaErrores();
    public TablaToken tablaToken = new TablaToken();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Lexer yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { tablaToken.insertar(new Token(yytext(),"OpLogico",yyline+1,yycolumn+1));
          }
        case 17: break;
        case 4: 
          { /**/
          }
        case 18: break;
        case 16: 
          { tablaToken.insertar(new Token(yytext(),"NumFlotante",yyline+1,yycolumn+1));
          }
        case 19: break;
        case 2: 
          { tablaToken.insertar(new Token(yytext(),"Identificador",yyline+1,yycolumn+1));
          }
        case 20: break;
        case 13: 
          { tablaError.insertar(new ErrorToken(1,"Léxico","Numero decimal invalido",yytext(),yyline+1,yycolumn+1));
          }
        case 21: break;
        case 12: 
          { tablaError.insertar(new ErrorToken(2,"Léxico","Identificador invalido",yytext(),yyline+1,yycolumn+1));
          }
        case 22: break;
        case 7: 
          { tablaToken.insertar(new Token(yytext(),"OpAsignacion",yyline+1,yycolumn+1));
          }
        case 23: break;
        case 10: 
          { tablaToken.insertar(new Token(yytext(),"SignoAgrupacion",yyline+1,yycolumn+1));
          }
        case 24: break;
        case 14: 
          { tablaToken.insertar(new Token(yytext(),"CadenaCaracteres",yyline+1,yycolumn+1));
          }
        case 25: break;
        case 6: 
          { tablaToken.insertar(new Token(yytext(),"OpAccesoMiembros",yyline+1,yycolumn+1));
          }
        case 26: break;
        case 3: 
          { tablaToken.insertar(new Token(yytext(),"NumEntero",yyline+1,yycolumn+1));
          }
        case 27: break;
        case 1: 
          { tablaError.insertar(new ErrorToken(3,"Léxico","Simbolo desconocido",yytext(),yyline+1,yycolumn+1));
          }
        case 28: break;
        case 9: 
          { tablaToken.insertar(new Token(yytext(),"OpComparacion",yyline+1,yycolumn+1));
          }
        case 29: break;
        case 5: 
          { tablaToken.insertar(new Token(yytext(),"OpAritmetico",yyline+1,yycolumn+1));
          }
        case 30: break;
        case 11: 
          { tablaToken.insertar(new Token(yytext(),"SignoPuntuacion",yyline+1,yycolumn+1));
          }
        case 31: break;
        case 15: 
          { tablaToken.insertar(new Token(yytext(),"RESERVADA",yyline+1,yycolumn+1));
          }
        case 32: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
