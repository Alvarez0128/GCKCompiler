/* The following code was generated by JFlex 1.6.1 */


package AnalisisLexico;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/cesar/OneDrive/Documentos/NetBeansProjects/GCKCompiler/src/AnalisisLexico/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\4\1\3\1\71\1\4\1\2\16\11\4\0\1\4\1\63"+
    "\1\7\1\0\1\10\1\62\1\67\1\0\1\65\1\65\1\62\1\12"+
    "\1\66\1\6\1\13\1\5\2\1\1\37\7\1\1\66\1\0\1\64"+
    "\1\61\1\64\2\0\1\32\1\47\1\34\1\40\1\57\1\44\10\10"+
    "\1\53\1\55\1\10\1\35\1\27\1\50\1\10\1\43\4\10\1\65"+
    "\1\0\1\65\1\0\1\10\1\0\1\22\1\31\1\23\1\42\1\36"+
    "\1\17\1\30\1\25\1\14\1\54\1\60\1\20\1\51\1\15\1\21"+
    "\1\52\1\10\1\26\1\24\1\16\1\45\1\56\1\46\1\41\1\33"+
    "\1\10\1\65\1\70\1\65\1\0\6\11\1\72\32\11\2\0\4\10"+
    "\4\0\1\10\2\0\1\11\7\0\1\10\4\0\1\10\5\0\27\10"+
    "\1\0\37\10\1\0\u01ca\10\4\0\14\10\16\0\5\10\7\0\1\10"+
    "\1\0\1\10\21\0\160\11\5\10\1\0\2\10\2\0\4\10\1\0"+
    "\1\10\6\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0"+
    "\123\10\1\0\213\10\1\0\5\11\2\0\246\10\1\0\46\10\2\0"+
    "\1\10\6\0\51\10\6\0\1\10\1\0\55\11\1\0\1\11\1\0"+
    "\2\11\1\0\2\11\1\0\1\11\10\0\33\10\4\0\4\10\15\0"+
    "\6\11\5\0\1\10\4\0\13\11\1\0\1\11\3\0\53\10\37\11"+
    "\4\0\2\10\1\11\143\10\1\0\1\10\10\11\1\0\6\11\2\10"+
    "\2\11\1\0\4\11\2\10\12\11\3\10\2\0\1\10\17\0\1\11"+
    "\1\10\1\11\36\10\33\11\2\0\131\10\13\11\1\10\16\0\12\11"+
    "\41\10\11\11\2\10\4\0\1\10\2\0\1\11\30\10\4\11\1\10"+
    "\11\11\1\10\3\11\1\10\5\11\22\0\31\10\3\11\4\0\13\10"+
    "\5\0\30\10\1\0\6\10\1\0\2\11\6\0\10\11\52\10\72\11"+
    "\66\10\3\11\1\10\22\11\1\10\7\11\12\10\2\11\2\0\12\11"+
    "\1\0\20\10\3\11\1\0\10\10\2\0\2\10\2\0\26\10\1\0"+
    "\7\10\1\0\1\10\3\0\4\10\2\0\1\11\1\10\7\11\2\0"+
    "\2\11\2\0\3\11\1\10\10\0\1\11\4\0\2\10\1\0\3\10"+
    "\2\11\2\0\12\11\4\10\7\0\2\10\1\0\1\11\2\0\3\11"+
    "\1\0\6\10\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\2\10\1\0\2\10\2\0\1\11\1\0\5\11\4\0\2\11"+
    "\2\0\3\11\3\0\1\11\7\0\4\10\1\0\1\10\7\0\14\11"+
    "\3\10\1\11\13\0\3\11\1\0\11\10\1\0\3\10\1\0\26\10"+
    "\1\0\7\10\1\0\2\10\1\0\5\10\2\0\1\11\1\10\10\11"+
    "\1\0\3\11\1\0\3\11\2\0\1\10\17\0\2\10\2\11\2\0"+
    "\12\11\1\0\1\10\7\0\1\10\6\11\1\0\3\11\1\0\10\10"+
    "\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\2\0\1\11\1\10\7\11\2\0\2\11\2\0\3\11\7\0\3\11"+
    "\4\0\2\10\1\0\3\10\2\11\2\0\12\11\1\0\1\10\20\0"+
    "\1\11\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10"+
    "\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0\14\10"+
    "\4\0\5\11\3\0\3\11\1\0\4\11\2\0\1\10\6\0\1\11"+
    "\16\0\12\11\11\0\1\10\6\0\5\11\10\10\1\0\3\10\1\0"+
    "\27\10\1\0\20\10\2\0\1\11\1\10\7\11\1\0\3\11\1\0"+
    "\4\11\7\0\2\11\1\0\3\10\2\0\1\10\2\0\2\10\2\11"+
    "\2\0\12\11\20\0\1\10\3\11\1\0\10\10\1\0\3\10\1\0"+
    "\27\10\1\0\12\10\1\0\5\10\2\0\1\11\1\10\7\11\1\0"+
    "\3\11\1\0\4\11\7\0\2\11\6\0\2\10\1\0\2\10\2\11"+
    "\2\0\12\11\1\0\2\10\1\11\14\0\4\11\11\10\1\0\3\10"+
    "\1\0\51\10\2\11\1\10\7\11\1\0\3\11\1\0\4\11\1\10"+
    "\5\0\3\10\1\11\7\0\3\10\2\11\2\0\12\11\12\0\6\10"+
    "\1\0\3\11\1\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10"+
    "\2\0\7\10\3\0\1\11\4\0\6\11\1\0\1\11\1\0\10\11"+
    "\6\0\12\11\2\0\2\11\15\0\60\10\1\11\2\10\7\11\4\0"+
    "\10\10\10\11\1\0\12\11\47\0\2\10\1\0\1\10\1\0\5\10"+
    "\1\0\30\10\1\0\1\10\1\0\12\10\1\11\2\10\11\11\1\10"+
    "\2\0\5\10\1\0\1\10\1\0\7\11\1\0\12\11\2\0\4\10"+
    "\40\0\1\10\27\0\2\11\6\0\12\11\13\0\1\11\1\0\1\11"+
    "\1\0\1\11\4\0\2\11\10\10\1\0\44\10\4\0\24\11\1\0"+
    "\2\11\5\10\13\11\1\0\44\11\11\0\1\11\71\0\53\10\24\11"+
    "\1\10\12\11\6\0\6\10\4\11\4\10\3\11\1\10\3\11\2\10"+
    "\7\11\3\10\4\11\15\10\14\11\1\10\17\11\2\0\46\10\1\0"+
    "\1\10\5\0\1\10\2\0\53\10\1\0\u014d\10\1\0\4\10\2\0"+
    "\7\10\1\0\1\10\1\0\4\10\2\0\51\10\1\0\4\10\2\0"+
    "\41\10\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0"+
    "\17\10\1\0\71\10\1\0\4\10\2\0\103\10\2\0\3\11\40\0"+
    "\20\10\20\0\126\10\2\0\6\10\3\0\u026c\10\2\0\21\10\1\0"+
    "\32\10\5\0\113\10\3\0\13\10\7\0\22\10\4\11\11\0\23\10"+
    "\3\11\13\0\22\10\2\11\14\0\15\10\1\0\3\10\1\0\2\11"+
    "\14\0\64\10\40\11\3\0\1\10\3\0\2\10\1\11\2\0\12\11"+
    "\41\0\17\11\6\0\131\10\7\0\5\10\2\11\42\10\1\11\1\10"+
    "\5\0\106\10\12\0\37\10\1\0\14\11\4\0\14\11\12\0\12\11"+
    "\36\10\2\0\5\10\13\0\54\10\4\0\32\10\6\0\12\11\46\0"+
    "\27\10\5\11\4\0\65\10\12\11\1\0\35\11\2\0\13\11\6\0"+
    "\12\11\15\0\1\10\10\0\16\11\1\0\20\11\61\0\5\11\57\10"+
    "\21\11\10\10\3\0\12\11\21\0\11\11\14\0\3\11\36\10\15\11"+
    "\2\10\12\11\54\10\16\11\14\0\44\10\24\11\10\0\12\11\3\0"+
    "\3\10\12\11\44\10\2\0\11\10\7\0\53\10\2\0\3\10\20\0"+
    "\3\11\1\0\25\11\4\10\1\11\6\10\1\11\2\10\3\11\1\10"+
    "\5\0\300\10\100\11\u0116\10\2\0\6\10\2\0\46\10\2\0\6\10"+
    "\2\0\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10"+
    "\2\0\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10"+
    "\3\0\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10"+
    "\16\0\5\11\30\0\1\71\1\71\5\11\20\0\2\10\23\0\1\10"+
    "\13\0\5\11\1\0\12\11\1\0\1\10\15\0\1\10\20\0\15\10"+
    "\3\0\41\10\17\0\15\11\4\0\1\11\3\0\14\11\21\0\1\10"+
    "\4\0\1\10\2\0\12\10\1\0\1\10\3\0\5\10\6\0\1\10"+
    "\1\0\1\10\1\0\1\10\1\0\4\10\1\0\13\10\2\0\4\10"+
    "\5\0\5\10\4\0\1\10\21\0\51\10\u0a77\0\345\10\6\0\4\10"+
    "\3\11\2\10\14\0\46\10\1\0\1\10\5\0\1\10\2\0\70\10"+
    "\7\0\1\10\17\0\1\11\27\10\11\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0\7\10\1\0"+
    "\7\10\1\0\40\11\57\0\1\10\u01d5\0\3\10\31\0\11\10\6\11"+
    "\1\0\5\10\2\0\5\10\4\0\126\10\2\0\2\11\2\0\3\10"+
    "\1\0\132\10\1\0\4\10\5\0\53\10\1\0\136\10\21\0\40\10"+
    "\60\0\20\10\u0200\0\u19c0\10\100\0\u568d\10\103\0\56\10\2\0\u010d\10"+
    "\3\0\20\10\12\11\2\10\24\0\57\10\1\11\4\0\12\11\1\0"+
    "\37\10\2\11\120\10\2\11\45\0\11\10\2\0\147\10\2\0\100\10"+
    "\5\0\2\10\1\0\1\10\1\0\5\10\30\0\20\10\1\11\3\10"+
    "\1\11\4\10\1\11\27\10\5\11\4\0\1\11\13\0\1\10\7\0"+
    "\64\10\14\0\2\11\62\10\22\11\12\0\12\11\6\0\22\11\6\10"+
    "\3\0\1\10\1\0\2\10\13\11\34\10\10\11\2\0\27\10\15\11"+
    "\14\0\35\10\3\0\4\11\57\10\16\11\16\0\1\10\12\11\6\0"+
    "\5\10\1\11\12\10\12\11\5\10\1\0\51\10\16\11\11\0\3\10"+
    "\1\11\10\10\2\11\2\0\12\11\6\0\27\10\3\0\1\10\3\11"+
    "\62\10\1\11\1\10\3\11\2\10\2\11\5\10\2\11\1\10\1\11"+
    "\1\10\30\0\3\10\2\0\13\10\5\11\2\0\3\10\2\11\12\0"+
    "\6\10\2\0\6\10\2\0\6\10\11\0\7\10\1\0\7\10\1\0"+
    "\53\10\1\0\16\10\6\0\163\10\10\11\1\0\2\11\2\0\12\11"+
    "\6\0\u2ba4\10\14\0\27\10\4\0\61\10\u2104\0\u016e\10\2\0\152\10"+
    "\46\0\7\10\14\0\5\10\5\0\1\10\1\11\12\10\1\0\15\10"+
    "\1\0\5\10\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10"+
    "\41\0\u016b\10\22\0\100\10\2\0\66\10\50\0\15\10\3\0\20\11"+
    "\20\0\20\11\3\0\2\10\30\0\3\10\31\0\1\10\6\0\5\10"+
    "\1\0\207\10\2\0\1\11\4\0\1\10\13\0\12\11\7\0\32\10"+
    "\4\0\1\10\1\0\32\10\13\0\131\10\3\0\6\10\2\0\6\10"+
    "\2\0\6\10\2\0\3\10\3\0\2\10\3\0\2\10\22\0\3\11"+
    "\4\0\14\10\1\0\32\10\1\0\23\10\1\0\2\10\1\0\17\10"+
    "\2\0\16\10\42\0\173\10\105\0\65\10\210\0\1\11\202\0\35\10"+
    "\3\0\61\10\17\0\1\11\37\0\40\10\15\0\36\10\5\0\46\10"+
    "\5\11\5\0\36\10\2\0\44\10\4\0\10\10\1\0\5\10\52\0"+
    "\236\10\2\0\12\11\6\0\44\10\4\0\44\10\4\0\50\10\10\0"+
    "\64\10\14\0\13\10\1\0\17\10\1\0\7\10\1\0\2\10\1\0"+
    "\13\10\1\0\17\10\1\0\7\10\1\0\2\10\103\0\u0137\10\11\0"+
    "\26\10\12\0\10\10\30\0\6\10\1\0\52\10\1\0\11\10\105\0"+
    "\6\10\2\0\1\10\1\0\54\10\1\0\2\10\3\0\1\10\2\0"+
    "\27\10\12\0\27\10\11\0\37\10\101\0\23\10\1\0\2\10\12\0"+
    "\26\10\12\0\32\10\106\0\70\10\6\0\2\10\100\0\1\10\3\11"+
    "\1\0\2\11\5\0\4\11\4\10\1\0\3\10\1\0\35\10\2\0"+
    "\3\11\4\0\1\11\40\0\35\10\3\0\35\10\43\0\10\10\1\0"+
    "\34\10\2\11\31\0\66\10\12\0\26\10\12\0\23\10\15\0\22\10"+
    "\156\0\111\10\67\0\63\10\15\0\63\10\15\0\44\10\4\11\10\0"+
    "\12\11\u0146\0\52\10\1\0\2\11\3\0\2\10\113\0\3\11\35\10"+
    "\12\0\1\10\10\0\26\10\13\11\37\0\22\10\4\11\52\0\25\10"+
    "\33\0\27\10\11\0\3\11\65\10\17\11\37\0\13\11\2\10\2\11"+
    "\1\10\11\0\4\11\55\10\13\11\2\0\1\11\4\0\1\11\12\0"+
    "\1\11\2\0\31\10\7\0\12\11\6\0\3\11\44\10\16\11\1\0"+
    "\12\11\4\0\1\10\2\11\1\10\10\0\43\10\1\11\2\0\1\10"+
    "\11\0\3\11\60\10\16\11\4\10\4\0\4\11\1\0\14\11\1\10"+
    "\1\0\1\10\43\0\22\10\1\0\31\10\14\11\6\0\1\11\2\10"+
    "\1\11\76\0\7\10\1\0\1\10\1\0\4\10\1\0\17\10\1\0"+
    "\12\10\7\0\57\10\14\11\5\0\12\11\6\0\4\11\1\0\10\10"+
    "\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\1\0\2\11\1\10\7\11\2\0\2\11\2\0\3\11\2\0\1\10"+
    "\6\0\1\11\5\0\5\10\2\11\2\0\7\11\3\0\5\11\213\0"+
    "\65\10\22\11\4\10\5\0\12\11\4\0\1\11\3\10\36\0\60\10"+
    "\24\11\2\10\1\0\1\10\10\0\12\11\246\0\57\10\7\11\2\0"+
    "\11\11\27\0\4\10\2\11\42\0\60\10\21\11\3\0\1\10\13\0"+
    "\12\11\46\0\53\10\15\11\1\10\7\0\12\11\66\0\33\10\2\0"+
    "\17\11\4\0\12\11\6\0\7\10\271\0\54\10\17\11\145\0\100\10"+
    "\12\11\25\0\10\10\2\0\1\10\2\0\10\10\1\0\2\10\1\0"+
    "\30\10\6\11\1\0\2\11\2\0\4\11\1\10\1\11\1\10\2\11"+
    "\14\0\12\11\106\0\10\10\2\0\47\10\7\11\2\0\7\11\1\10"+
    "\1\0\1\10\1\11\33\0\1\10\12\11\50\10\7\11\1\10\4\11"+
    "\10\0\1\11\10\0\1\10\13\11\56\10\20\11\3\0\1\10\22\0"+
    "\111\10\u0107\0\11\10\1\0\45\10\10\11\1\0\10\11\1\10\17\0"+
    "\12\11\30\0\36\10\2\0\26\11\1\0\16\11\111\0\7\10\1\0"+
    "\2\10\1\0\46\10\6\11\3\0\1\11\1\0\2\11\1\0\7\11"+
    "\1\10\1\11\10\0\12\11\6\0\6\10\1\0\2\10\1\0\40\10"+
    "\5\11\1\0\2\11\1\0\5\11\1\10\7\0\12\11\u0136\0\23\10"+
    "\4\11\11\0\2\11\1\10\1\11\15\10\1\0\42\10\7\11\3\0"+
    "\5\11\15\0\12\11\126\0\1\10\54\0\4\10\37\0\u039a\10\146\0"+
    "\157\10\21\0\304\10\u0a4c\0\141\10\17\0\u0430\10\21\11\6\10\17\11"+
    "\u0faa\0\u0247\10\u21b9\0\u0239\10\7\0\37\10\1\0\12\11\6\0\117\10"+
    "\1\0\12\11\6\0\36\10\2\0\5\11\13\0\60\10\7\11\11\0"+
    "\4\10\14\0\12\11\11\0\25\10\5\0\23\10\u02b0\0\100\10\200\0"+
    "\113\10\4\0\1\11\1\10\67\11\7\0\4\11\15\10\100\0\2\10"+
    "\1\0\1\10\1\11\13\0\2\11\16\0\u17f8\10\10\0\u04d6\10\52\0"+
    "\11\10\u22e7\0\4\10\1\0\7\10\1\0\2\10\1\0\u0123\10\17\0"+
    "\1\10\35\0\3\10\2\0\1\10\16\0\4\10\10\0\u018c\10\u0904\0"+
    "\153\10\5\0\15\10\3\0\11\10\7\0\12\10\3\0\2\11\1\0"+
    "\4\11\u125c\0\56\11\2\0\27\11\u021e\0\5\11\3\0\26\11\2\0"+
    "\7\11\36\0\4\11\224\0\3\11\u01bb\0\125\10\1\0\107\10\1\0"+
    "\2\10\2\0\1\10\2\0\2\10\2\0\4\10\1\0\14\10\1\0"+
    "\1\10\1\0\7\10\1\0\101\10\1\0\4\10\2\0\10\10\1\0"+
    "\7\10\1\0\34\10\1\0\4\10\1\0\5\10\1\0\1\10\3\0"+
    "\7\10\1\0\u0154\10\2\0\31\10\1\0\31\10\1\0\37\10\1\0"+
    "\31\10\1\0\37\10\1\0\31\10\1\0\37\10\1\0\31\10\1\0"+
    "\37\10\1\0\31\10\1\0\10\10\2\0\62\11\u0200\0\67\11\4\0"+
    "\62\11\10\0\1\11\16\0\1\11\26\0\5\11\1\0\17\11\u0450\0"+
    "\37\10\6\0\6\10\325\0\7\11\1\0\21\11\2\0\7\11\1\0"+
    "\2\11\1\0\5\11\5\0\76\10\41\0\1\11\160\0\55\10\3\0"+
    "\7\11\7\10\2\0\12\11\4\0\1\10\u0141\0\36\10\1\11\21\0"+
    "\54\10\16\11\5\0\1\10\u01d0\0\34\10\16\11\u02e6\0\7\10\1\0"+
    "\4\10\1\0\2\10\1\0\17\10\1\0\305\10\13\0\7\11\51\0"+
    "\104\10\7\11\1\10\4\0\12\11\u0356\0\1\10\u014f\0\4\10\1\0"+
    "\33\10\1\0\2\10\1\0\1\10\2\0\1\10\1\0\12\10\1\0"+
    "\4\10\1\0\1\10\1\0\1\10\6\0\1\10\4\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\0\3\10\1\0\2\10\1\0\1\10\2\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\2\10\1\0\1\10\2\0\4\10\1\0\7\10\1\0\4\10\1\0"+
    "\4\10\1\0\1\10\1\0\12\10\1\0\21\10\5\0\3\10\1\0"+
    "\5\10\1\0\21\10\u0d34\0\12\11\u0406\0\ua6e0\10\40\0\u103a\10\6\0"+
    "\336\10\2\0\u1682\10\16\0\u1d31\10\u0c1f\0\u021e\10\u05e2\0\u134b\10\5\0"+
    "\u1060\10\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udc5b\0"+
    "\1\11\36\0\140\11\200\0\360\11\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\2\4\1\1\1\5\1\6"+
    "\26\5\1\7\1\4\1\10\1\11\1\12\1\13\2\1"+
    "\1\14\1\15\2\0\1\7\1\2\3\0\1\16\1\15"+
    "\1\5\1\17\36\5\1\11\1\10\1\20\1\0\1\15"+
    "\1\0\2\21\33\5\2\0\1\3\17\5\1\15\1\0"+
    "\32\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512"+
    "\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\u0725\0\u0725\0\73\0\73\0\u079b\0\u07d6"+
    "\0\u0811\0\u084c\0\u0887\0\u08c2\0\73\0\u08fd\0\u0938\0\u01d8"+
    "\0\u0162\0\u0162\0\u0973\0\u09ae\0\u019d\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\u1022\0\u105d\0\u1098\0\73\0\73\0\u10d3\0\u110e\0\u1149"+
    "\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9"+
    "\0\u08c2\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46"+
    "\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e"+
    "\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6"+
    "\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce"+
    "\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6"+
    "\0\u21e1\0\u221c\0\u2257\0\u2292";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\7\1\12\1\13\1\14\1\15\1\16\3\11"+
    "\1\17\2\11\1\20\1\21\1\11\1\22\1\23\1\11"+
    "\1\24\1\25\1\26\1\3\1\27\2\11\1\30\1\31"+
    "\1\11\1\32\1\11\1\33\1\11\1\34\1\35\1\11"+
    "\1\36\1\37\1\40\1\11\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\76\0\1\3\6\0\1\51"+
    "\2\0\1\52\23\51\1\3\21\51\15\0\1\5\74\0"+
    "\1\53\1\54\52\0\1\55\12\0\1\56\4\0\1\57"+
    "\3\0\1\57\1\60\23\0\1\56\21\0\1\55\11\0"+
    "\2\61\2\0\3\61\1\62\63\61\1\0\1\11\6\0"+
    "\2\11\2\0\45\11\11\0\1\11\1\0\1\63\11\0"+
    "\1\60\23\0\1\63\34\0\1\11\6\0\2\11\2\0"+
    "\1\11\1\64\1\11\1\65\31\11\1\66\7\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\22\11\1\67"+
    "\22\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\12\11\1\70\32\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\4\11\1\71\1\72\1\73\22\11\1\74"+
    "\13\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\4\11\1\75\1\76\3\11\1\77\33\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\22\11\1\100\22\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\2\11"+
    "\1\101\4\11\1\102\35\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\5\11\1\103\4\11\1\104\32\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\12\11"+
    "\1\105\3\11\1\106\26\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\5\11\1\107\37\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\22\11\1\110\22\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\4\11"+
    "\1\111\20\11\1\112\17\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\1\113\44\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\22\11\1\114\22\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\1\115\44\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\11\11"+
    "\1\31\33\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\1\116\44\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\12\11\1\117\32\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\15\11\1\120\27\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\11\11\1\121"+
    "\33\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\5\11\1\122\37\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\12\11\1\123\32\11\11\0\1\11\61\0"+
    "\1\124\72\0\1\55\100\0\1\125\73\0\1\125\3\0"+
    "\1\51\6\0\2\51\2\0\45\51\11\0\1\51\1\0"+
    "\1\126\4\0\1\127\3\0\1\127\1\130\23\0\1\126"+
    "\33\0\2\53\1\4\1\5\67\53\2\54\1\0\3\54"+
    "\1\131\64\54\1\0\1\56\11\0\1\52\23\0\1\56"+
    "\34\0\1\132\4\0\1\57\1\0\1\133\1\0\1\57"+
    "\1\60\23\133\1\132\21\133\13\0\1\130\4\0\1\127"+
    "\3\0\1\127\1\60\23\0\1\130\34\0\1\11\6\0"+
    "\2\11\2\0\2\11\1\65\42\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\36\11\1\134\6\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\32\11\1\65"+
    "\12\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\31\11\1\135\13\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\5\11\1\136\37\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\12\11\1\65\32\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\4\11\1\137"+
    "\40\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\1\11\1\140\43\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\6\11\1\141\36\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\1\11\1\142\43\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\6\11\1\72"+
    "\36\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\2\11\1\143\42\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\6\11\1\144\3\11\1\145\32\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\22\11\1\146"+
    "\22\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\5\11\1\147\37\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\22\11\1\150\22\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\12\11\1\151\32\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\33\11\1\152"+
    "\11\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\4\11\1\153\40\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\7\11\1\154\1\155\34\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\1\156\7\11\1\135"+
    "\34\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\2\11\1\157\42\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\7\11\1\160\35\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\7\11\1\161\35\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\4\11\1\135"+
    "\40\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\35\11\1\162\7\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\1\163\44\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\40\11\1\164\4\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\17\11\1\165\25\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\1\166"+
    "\44\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\12\11\1\153\32\11\11\0\1\11\1\0\1\126\11\0"+
    "\1\130\23\0\1\126\34\0\1\167\4\0\1\170\3\0"+
    "\1\170\1\60\23\0\1\167\34\0\1\130\4\0\1\127"+
    "\3\0\1\127\1\130\23\0\1\130\33\0\2\54\1\0"+
    "\2\54\1\171\1\131\64\54\1\0\1\132\11\0\1\130"+
    "\23\0\1\132\34\0\1\133\6\0\2\133\2\0\45\133"+
    "\11\0\1\133\1\0\1\11\6\0\2\11\2\0\5\11"+
    "\1\172\37\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\22\11\1\65\22\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\6\11\1\64\36\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\10\11\1\135\34\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\7\11"+
    "\1\65\35\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\10\11\1\173\34\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\10\11\1\64\34\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\31\11\1\174\13\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\12\11"+
    "\1\64\32\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\1\175\44\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\1\11\1\176\43\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\4\11\1\65\40\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\6\11\1\177"+
    "\36\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\6\11\1\200\36\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\33\11\1\65\11\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\5\11\1\72\37\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\2\11\1\201"+
    "\42\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\5\11\1\202\37\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\3\11\1\65\41\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\22\11\1\203\22\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\2\11\1\204"+
    "\42\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\2\11\1\205\42\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\22\11\1\206\22\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\1\11\1\64\43\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\22\11\1\207"+
    "\22\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\10\11\1\210\34\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\26\11\1\65\16\11\11\0\1\11\1\0"+
    "\1\167\11\0\1\211\23\0\1\167\34\0\1\212\4\0"+
    "\1\170\3\0\1\170\1\60\23\0\1\212\34\0\1\11"+
    "\6\0\2\11\2\0\12\11\1\213\32\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\10\11\1\65\34\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\12\11"+
    "\1\214\32\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\1\11\1\215\43\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\22\11\1\216\22\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\44\11\1\65\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\17\11\1\65"+
    "\25\11\11\0\1\11\1\0\1\11\6\0\2\11\2\0"+
    "\23\11\1\65\21\11\11\0\1\11\1\0\1\11\6\0"+
    "\2\11\2\0\31\11\1\217\13\11\11\0\1\11\1\0"+
    "\1\11\6\0\2\11\2\0\1\11\1\220\43\11\11\0"+
    "\1\11\1\0\1\11\6\0\2\11\2\0\1\221\44\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\5\11"+
    "\1\222\37\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\13\11\1\223\31\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\7\11\1\64\35\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\1\224\44\11\11\0"+
    "\1\11\1\0\1\212\4\0\1\127\3\0\1\127\1\130"+
    "\23\0\1\212\34\0\1\212\11\0\1\130\23\0\1\212"+
    "\34\0\1\11\6\0\2\11\2\0\2\11\1\225\42\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\1\11"+
    "\1\65\43\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\14\11\1\65\30\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\34\11\1\226\10\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\12\11\1\227\32\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\26\11"+
    "\1\173\16\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\5\11\1\230\37\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\12\11\1\201\32\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\36\11\1\231\6\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\7\11"+
    "\1\232\35\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\16\11\1\233\26\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\12\11\1\234\32\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\7\11\1\135\35\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\1\11"+
    "\1\235\43\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\6\11\1\214\36\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\10\11\1\236\34\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\4\11\1\147\40\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\22\11"+
    "\1\135\22\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\6\11\1\237\36\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\13\11\1\240\17\11\1\241\11\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\12\11"+
    "\1\200\32\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\11\11\1\242\33\11\11\0\1\11\1\0\1\11"+
    "\6\0\2\11\2\0\5\11\1\243\37\11\11\0\1\11"+
    "\1\0\1\11\6\0\2\11\2\0\6\11\1\244\36\11"+
    "\11\0\1\11\1\0\1\11\6\0\2\11\2\0\26\11"+
    "\1\200\16\11\11\0\1\11\1\0\1\11\6\0\2\11"+
    "\2\0\36\11\1\135\6\11\11\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8909];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\37\1\2\11\4\1\2\0"+
    "\1\11\1\1\3\0\42\1\2\11\1\1\1\0\1\1"+
    "\1\0\35\1\2\0\21\1\1\0\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Codigo de usuario
    public TablaErrores tablaError = new TablaErrores();
    public TablaToken tablaToken = new TablaToken();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3900) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Lexer yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { tablaError.insertar(new ErrorToken(3,"Léxico","Simbolo desconocido; revise que el simbolo coincida con el alfabeto",yytext(),yyline+1,yycolumn+1));
            }
          case 18: break;
          case 2: 
            { tablaToken.insertar(new Token(yytext(),"NumEntero",yyline+1,yycolumn+1));
            }
          case 19: break;
          case 3: 
            { /**/
            }
          case 20: break;
          case 4: 
            { tablaToken.insertar(new Token(yytext(),"OpAritmetico",yyline+1,yycolumn+1));
            }
          case 21: break;
          case 5: 
            { tablaToken.insertar(new Token(yytext(),"Identificador",yyline+1,yycolumn+1));
            }
          case 22: break;
          case 6: 
            { tablaToken.insertar(new Token(yytext(),"OpAccesoMiembros",yyline+1,yycolumn+1));
            }
          case 23: break;
          case 7: 
            { tablaToken.insertar(new Token(yytext(),"OpAsignacion",yyline+1,yycolumn+1));
            }
          case 24: break;
          case 8: 
            { tablaToken.insertar(new Token(yytext(),"OpLogico",yyline+1,yycolumn+1));
            }
          case 25: break;
          case 9: 
            { tablaToken.insertar(new Token(yytext(),"OpComparacion",yyline+1,yycolumn+1));
            }
          case 26: break;
          case 10: 
            { tablaToken.insertar(new Token(yytext(),"SignoAgrupacion",yyline+1,yycolumn+1));
            }
          case 27: break;
          case 11: 
            { tablaToken.insertar(new Token(yytext(),"SignoPuntuacion",yyline+1,yycolumn+1));
            }
          case 28: break;
          case 12: 
            { tablaError.insertar(new ErrorToken(3,"Léxico","Identificador inválido; debe iniciar con una letra",yytext(),yyline+1,yycolumn+1));
            }
          case 29: break;
          case 13: 
            { tablaError.insertar(new ErrorToken(1,"Léxico","Número decimal inválido; verifique que coincida con el formato #.#",yytext(),yyline+1,yycolumn+1));
            }
          case 30: break;
          case 14: 
            { tablaToken.insertar(new Token(yytext(),"CadenaCaracteres",yyline+1,yycolumn+1));
            }
          case 31: break;
          case 15: 
            { tablaToken.insertar(new Token(yytext(),"RESERVADA",yyline+1,yycolumn+1));
            }
          case 32: break;
          case 16: 
            { tablaToken.insertar(new Token(yytext(),"NumFlotante",yyline+1,yycolumn+1));
            }
          case 33: break;
          case 17: 
            { tablaError.insertar(new ErrorToken(2,"Léxico","Número inválido; verifique que coincida con el formato +# o -#",yytext(),yyline+1,yycolumn+1));
            }
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
